
import com.sun.rowset.CachedRowSetImpl;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Properties;
import javax.sql.RowSetEvent;
import javax.sql.RowSetListener;
import javax.sql.rowset.CachedRowSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author brendan
 */
public class ClientTab extends javax.swing.JPanel implements RowSetListener {

    /**
     * Creates new form ClientTab
     * @param prop
     * @throws java.sql.SQLException
     */
    
    
    public ClientTab(Properties prop,Main_W parent) throws SQLException {
        this.connectionProp=prop;
        this.parent=parent;
        this.selectedRow=0;
        
        
        
        CachedRowSet myRowSet = getContentsOfTable();
        myTableModel = new DataTableModel(myRowSet);
        //myTableModel.addEventHandlersToRowSet(this);    //usefull??

        clientTable = new JTable(); // Displays the table
        clientTable.setModel(myTableModel);
        clientTable.setAutoCreateRowSorter(true);
        
        initComponents();
        
        
        clientTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        clientTable.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            selectedRow = clientTable.rowAtPoint(evt.getPoint())+1;
            selectedRow=clientTable.convertRowIndexToModel(selectedRow);
            if (selectedRow >= 0) {
                modifButton.setEnabled(true);
                removeButton.setEnabled(true);
                for (int j = 0; j < 4; j++) 
                        {
                            System.out.println(" " + myTableModel.getValueAt(selectedRow, j));
                        }
            }
        }
        });
        
        
        
        /*
        ListSelectionModel rowSM = clientTable.getSelectionModel();
            rowSM.addListSelectionListener(new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                    if (lsm.isSelectionEmpty()) {
                        modifButton.setEnabled(false);
                        removeButton.setEnabled(false);
                    } else {
                        int selectedRow = lsm.getMinSelectionIndex();
                        modifButton.setEnabled(true);
                        removeButton.setEnabled(true);
                        for (int j = 0; j < 4; j++) 
                        {
                            System.out.print(" " + myTableModel.getValueAt(selectedRow, j));
                        }
                    }
                }
            });
        */
        
          
            
            
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        paneForTable = new javax.swing.JScrollPane(clientTable);
        modifButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        jButton1.setText("Add");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        modifButton.setText("Modify");
        modifButton.setEnabled(false);
        modifButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modifButtonMouseClicked(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paneForTable)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(modifButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeButton)
                        .addGap(0, 175, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(modifButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneForTable, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        AddClient NewClientW = new AddClient(getParent(),this,true);       
        NewClientW.setLocationRelativeTo(null);
        NewClientW.setVisible(true);
    }//GEN-LAST:event_jButton1MouseClicked

    private void modifButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modifButtonMouseClicked
        HashMap<Integer, String> content = new HashMap<Integer, String>();
        Statement stmt = null;
        try{
            Connection conn=getParent().getConnection();
            stmt = conn.createStatement();
            String sqlQuery;
            //we need the adress id and deliver adress id
            int rowAd=0;
            int rowDAd=0;
            sqlQuery = "SELECT Clients.name,Clients.phone1,Clients.phone2,Clients.email,Clients.qq,Clients.infos,"
                    + "main.street,main.city,main.country,main.zip_code,"
                    + "dev.street,dev.city,dev.country,dev.zip_code "
                    + "from Clients inner join Adresses as main on Clients.adress=main.ad_id "
                    +  "inner join Adresses as dev on Clients.delivery_adress=dev.ad_id "
                    + "where cl_id="+Integer.toString(selectedRow)+";";
            ResultSet rs = stmt.executeQuery(sqlQuery);
            if (rs.next()) {
                content.put(1,rs.getString("Clients.name"));
                content.put(2,rs.getString("Clients.phone1"));
                content.put(3,rs.getString("Clients.phone2"));
                content.put(4,rs.getString("Clients.email"));
                content.put(5,rs.getString("Clients.qq"));
                content.put(6,rs.getString("Clients.infos"));
                content.put(7,rs.getString("main.street"));
                content.put(8,rs.getString("main.city"));
                content.put(9,rs.getString("main.country"));
                content.put(10,rs.getString("main.zip_code"));
                content.put(11,rs.getString("dev.street"));
                content.put(12,rs.getString("dev.city"));
                content.put(13,rs.getString("dev.country"));
                content.put(14,rs.getString("dev.zip_code"));
                System.out.println(selectedRow);
                
            }
        }catch(SQLException se) {
                //Handle errors for JDBC
                System.out.println("Problem with request");
            } finally {
                //finally block used to close resources
                try{
                    if(stmt!=null)
                    stmt.close();
                }catch(SQLException se2){ }// nothing we can do
            }//end finally
            
        
     
        
        
        //le pb est la!! a voir
        ModifyClient ModClientW = new ModifyClient(getParent(),this,true,content,selectedRow);       
        ModClientW.setLocationRelativeTo(null);
        ModClientW.setVisible(true);

    }//GEN-LAST:event_modifButtonMouseClicked

    private CachedRowSet getContentsOfTable() throws SQLException {
    CachedRowSet crs = null;
    try {
      crs = new CachedRowSetImpl();
      crs.setType(ResultSet.TYPE_SCROLL_INSENSITIVE);
      crs.setConcurrency(ResultSet.CONCUR_UPDATABLE);
      crs.setUsername(connectionProp.getProperty("user"));
      crs.setPassword(connectionProp.getProperty("password"));
      crs.setUrl("jdbc:mysql://localhost:3306/bdd_appli"+"?relaxAutoCommit=true");
      crs.setCommand("select name, phone1, email, qq, infos from Clients");
      crs.execute();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Unexpected error dans getContents\nDetails : "+e.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
    }
    return crs;
    }
    
    
    public void createNewTableModel() throws SQLException {
        myTableModel = new DataTableModel(getContentsOfTable());
        myTableModel.addEventHandlersToRowSet(this);
        clientTable.setModel(myTableModel);
    }
    
    
    @Override
    public Main_W getParent() {
        return parent;
    }
    
    public void actionPerformed(ActionEvent event) {  }

    @Override
    public void rowSetChanged(RowSetEvent event) {  }

    @Override
    public void rowChanged(RowSetEvent event) { }
    
    @Override
    public void cursorMoved(RowSetEvent event) {  }

    private Main_W parent;
    private Properties connectionProp; 
    private DataTableModel myTableModel;
    private JTable clientTable;
    private int selectedRow;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton modifButton;
    private javax.swing.JScrollPane paneForTable;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}
