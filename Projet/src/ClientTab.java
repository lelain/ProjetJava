
import com.sun.rowset.CachedRowSetImpl;
import java.awt.event.ActionEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import javax.sql.RowSetEvent;
import javax.sql.RowSetListener;
import javax.sql.rowset.CachedRowSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author brendan
 */
public class ClientTab extends javax.swing.JPanel implements RowSetListener {

    /**
     * Creates new form ClientTab
     * @param prop
     * @throws java.sql.SQLException
     */
    
    //Attention, j'aurai besoin aussi de la connection pour faire des statements
    //la passer en argument
    
    public ClientTab(Properties prop,Main_W parent) throws SQLException {
        this.connectionProp=prop;
        this.parent=parent;
        
        
        
        CachedRowSet myRowSet = getContentsOfTable();
        myTableModel = new DataTableModel(myRowSet);
        myTableModel.addEventHandlersToRowSet(this);    //util?

        clientTable = new JTable(); // Displays the table
        clientTable.setAutoCreateRowSorter(true);
        clientTable.setModel(myTableModel);
        clientTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ListSelectionModel rowSM = clientTable.getSelectionModel();
            rowSM.addListSelectionListener(new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                    if (lsm.isSelectionEmpty()) {
                        modifButton.setEnabled(false);
                        removeButton.setEnabled(false);
                    } else {
                        int selectedRow = lsm.getMinSelectionIndex();
                        System.out.println("Row " + selectedRow
                                           + " is now selected.");
                        modifButton.setEnabled(true);
                        removeButton.setEnabled(true);
                        for (int j = 0; j < 4; j++) 
                        {
                            System.out.print(" " + myTableModel.getValueAt(selectedRow, j));
                        }
                    }
                }
            });
            
            initComponents();
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        paneForTable = new javax.swing.JScrollPane(clientTable);
        modifButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        modifButton.setText("Modify");
        modifButton.setEnabled(false);

        removeButton.setText("Remove");
        removeButton.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paneForTable)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(modifButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeButton)
                        .addGap(0, 175, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(modifButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneForTable, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AddClient NewClientW = new AddClient(getParent(),this,true);       
        NewClientW.setLocationRelativeTo(null);
        NewClientW.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private CachedRowSet getContentsOfTable() throws SQLException {
    CachedRowSet crs = null;
    try {
      crs = new CachedRowSetImpl();
      crs.setType(ResultSet.TYPE_SCROLL_INSENSITIVE);
      crs.setConcurrency(ResultSet.CONCUR_UPDATABLE);
      crs.setUsername(connectionProp.getProperty("user"));
      crs.setPassword(connectionProp.getProperty("password"));
      crs.setUrl("jdbc:mysql://localhost:3306/bdd_appli"+"?relaxAutoCommit=true");
      crs.setCommand("select name, phone1, email, qq, infos from Clients");
      crs.execute();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Unexpected error dans getContents\nDetails : "+e.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
    }
    return crs;
    }
    
    
    public void createNewTableModel() throws SQLException {
        myTableModel = new DataTableModel(getContentsOfTable());
        myTableModel.addEventHandlersToRowSet(this);
        clientTable.setModel(myTableModel);
    }
    
    
    @Override
    public Main_W getParent() {
        return parent;
    }
    
    public void actionPerformed(ActionEvent event) {  }

    @Override
  public void rowSetChanged(RowSetEvent event) {  }

    @Override
  public void rowChanged(RowSetEvent event) { }
    @Override
  public void cursorMoved(RowSetEvent event) {  }

    private Main_W parent;
    private Properties connectionProp; 
    private DataTableModel myTableModel;
    private JTable clientTable;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton modifButton;
    private javax.swing.JScrollPane paneForTable;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}
