
import com.sun.rowset.CachedRowSetImpl;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Properties;
import javax.sql.rowset.CachedRowSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/*
 * This class is a tab for viewing the information about clients
 * It is aimed to be added to the tabbedPane of the main window
 */

/**
 *
 * @author brendan
 */
public class ClientTab extends javax.swing.JPanel {

    /**
     * Creates new form ClientTab
     * @param prop
     * @param parent
     * @throws java.sql.SQLException
     */
    public ClientTab(Properties prop,Main_W parent) throws SQLException {
        this.connectionProp=prop;
        this.parent=parent;
        this.selectedRow=0;

        CachedRowSet myRowSet = getContentsOfTable();
        myTableModel = new DataTableModel(myRowSet);
       
        clientTable = new JTable(); // Displays the table
        clientTable.setModel(myTableModel);
        clientTable.setAutoCreateRowSorter(true);
        clientTable.setPreferredScrollableViewportSize(new Dimension(500, 70));
        clientTable.setFillsViewportHeight(true);
        clientTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);      
        ListSelectionModel rowSM = clientTable.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                tableValueChangedEvent(e);  
            }
        });
         
        initComponents();
        paneForTable.setViewportView(clientTable);
          
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        paneForTable = new javax.swing.JScrollPane();
        modifButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        modifButton.setText("Modify");
        modifButton.setEnabled(false);
        modifButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paneForTable)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(modifButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeButton)
                        .addGap(0, 175, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(modifButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneForTable, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableValueChangedEvent(ListSelectionEvent e) {
        ListSelectionModel lsm = (ListSelectionModel)e.getSource();
        if (lsm.isSelectionEmpty()) {
            modifButton.setEnabled(false);
            removeButton.setEnabled(false);
        } else {
            
            //if a line is selected, selectedRow take the client id 
            //and we enable the modif and remove buttons
            
            int viewRow = clientTable.getSelectedRow();
            selectedRow = clientTable.convertRowIndexToModel(viewRow);
            
            Statement stmt=null;
            String name=(String)myTableModel.getValueAt(selectedRow,0);
            try{
                Connection conn=getMainWin().getConnection();
                stmt = conn.createStatement();
                String sqlQuery;
                sqlQuery="SELECT cl_id FROM V_Clients WHERE name ='"+name+"'";
                ResultSet rs = stmt.executeQuery(sqlQuery);
                if (rs.next()) { selectedRow=rs.getInt("cl_id"); }
                
            } catch (SQLException se) {
                //Handle errors for JDBC
                JOptionPane.showMessageDialog(this, "Unexpected error, request problem\nDetails : "+se.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
            } finally {
                //finally block used to close resources
                try{
                    if(stmt!=null)
                    stmt.close();
                }catch(SQLException se2){ }// nothing we can do
            }//end finally
                
            modifButton.setEnabled(true);
            removeButton.setEnabled(true);
        }
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AddClient NewClientW = new AddClient(getMainWin(),this,true);       
        NewClientW.setLocationRelativeTo(null);
        NewClientW.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void modifButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifButtonActionPerformed
        
        //we look for all the values corresponding to the selected row, store them in a hashmap
        //and send them to the modifyClient constructor for proper dialog construction
        
        System.out.println(selectedRow);
        HashMap<Integer, String> content = new HashMap<>();
        Statement stmt = null;
        try{
            Connection conn=getMainWin().getConnection();
            stmt = conn.createStatement();
            String sqlQuery;
            //we need the adress id and deliver adress id
            int rowAd=0;
            int rowDAd=0;
            sqlQuery = "SELECT V_Clients.name,V_Clients.phone1,V_Clients.phone2,V_Clients.adress,V_Clients.delivery_adress,V_Clients.email,V_Clients.qq,V_Clients.infos,"
                    + "main.street,main.city,main.country,main.zip_code,"
                    + "dev.street,dev.city,dev.country,dev.zip_code "
                    + "from V_Clients inner join V_Adresses as main on V_Clients.adress=main.ad_id "
                    +  "inner join V_Adresses as dev on V_Clients.delivery_adress=dev.ad_id "
                    + "where cl_id="+Integer.toString(selectedRow);
            
            ResultSet rs = stmt.executeQuery(sqlQuery);
            if (rs.next()) {
                content.put(1,rs.getString("V_Clients.name"));
                content.put(2,rs.getString("V_Clients.phone1"));
                content.put(3,rs.getString("V_Clients.phone2"));
                content.put(4,rs.getString("V_Clients.email"));
                content.put(5,rs.getString("V_Clients.qq"));
                content.put(6,rs.getString("V_Clients.infos"));
                content.put(7,rs.getString("main.street"));
                content.put(8,rs.getString("main.city"));
                content.put(9,rs.getString("main.country"));
                content.put(10,rs.getString("main.zip_code"));
                content.put(11,rs.getString("dev.street"));
                content.put(12,rs.getString("dev.city"));
                content.put(13,rs.getString("dev.country"));
                content.put(14,rs.getString("dev.zip_code"));
                
                //if delivery adress is also the main adress, we add a content Y
                if (rs.getInt("adress")==rs.getInt("delivery_adress")) {
                    content.put(15, "Y");
                } else {
                    content.put(15, "N");
                }
                
                
            }
        }catch(SQLException se) {
                //Handle errors for JDBC
                JOptionPane.showMessageDialog(this, "Unexpected error, request problem\nDetails : "+se.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
        } finally {
            //finally block used to close resources
            try{
                if(stmt!=null)
                stmt.close();
            }catch(SQLException se2){ }// nothing we can do
        }//end finally
        
        ModifyClient ModClientW = new ModifyClient(getMainWin(),this,true,content,selectedRow);       
        ModClientW.setLocationRelativeTo(null);
        ModClientW.setVisible(true);

    }//GEN-LAST:event_modifButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        //we get the client name, adress and delivery adress
        String name="",adress="",deli_adress="";
        Statement stmt = null;
        try{
            Connection conn=getMainWin().getConnection();
            stmt = conn.createStatement();
            String sqlQuery;           
            sqlQuery="SELECT name,adress,delivery_adress FROM V_Clients WHERE cl_id="+Integer.toString(selectedRow);
            ResultSet rs = stmt.executeQuery(sqlQuery);
            if (rs.next()) {
                name = rs.getString("name");
                adress = rs.getString("adress");
                deli_adress = rs.getString("delivery_adress");
            }
        } catch(SQLException se) {
                //Handle errors for JDBC
                JOptionPane.showMessageDialog(this, "Unexpected error, select request problem\nDetails : "+se.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
        } finally {
            //finally block used to close resources
        try{
            if(stmt!=null)
                stmt.close();
        }catch(SQLException se2){ }// nothing we can do
        }//end finally

        
        //little dialog before making the delete requests
        
        Object[] options = {"Yes","No"};
                
        int n = JOptionPane.showOptionDialog(this,"Are you sure you want to remove this client : "+name+" ?","Removing client",
                JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
        if (n==JOptionPane.YES_OPTION) {
            // here we are sure we want to remove the client
            stmt = null;
            try{
                Connection conn=getMainWin().getConnection();
                stmt = conn.createStatement();
                String sqlQuery;
                sqlQuery="DELETE FROM V_Clients WHERE cl_id="+Integer.toString(selectedRow);
                stmt.executeUpdate(sqlQuery);
                sqlQuery="DELETE FROM V_Adresses WHERE ad_id="+adress;
                stmt.executeUpdate(sqlQuery);
                sqlQuery="DELETE FROM V_Adresses WHERE ad_id="+deli_adress;
                stmt.executeUpdate(sqlQuery);
            } catch(SQLException se) {
                //Handle errors for JDBC
                JOptionPane.showMessageDialog(this, "Unexpected error, delete request problem\nDetails : "+se.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
            } finally {
            //finally block used to close resources
            try{
                if(stmt!=null) stmt.close();
            } catch(SQLException se2){ }// nothing we can do
            }//end finally
            
            //and we display the result on the table by creating a new tablemodel
            try {
                createNewTableModel();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Unexpected error, problem creating table\nDetails : "+ex.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
            }
            
        }
   
    }//GEN-LAST:event_removeButtonActionPerformed

    private CachedRowSet getContentsOfTable() throws SQLException {
    CachedRowSet crs = null;
    try {
      crs = new CachedRowSetImpl();
      crs.setType(ResultSet.TYPE_SCROLL_INSENSITIVE);
      crs.setConcurrency(ResultSet.CONCUR_UPDATABLE);
      crs.setUsername(connectionProp.getProperty("user"));
      crs.setPassword(connectionProp.getProperty("password"));
      crs.setUrl("jdbc:mysql://localhost:3306/bdd_appli"+"?relaxAutoCommit=true");
      crs.setCommand("select V_Clients.name, V_Clients.phone1, V_Clients.phone2, V_Clients.email, V_Clients.qq, "
              + "V_Adresses.street, V_Adresses.city, V_Adresses.zip_code, V_Adresses.country, V_Clients.infos from V_Clients"
              + " inner join V_Adresses on V_Clients.adress=V_Adresses.ad_id");
      crs.execute();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Unexpected error dans getContents\nDetails : "+e.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
    }
    return crs;
    }
    
    
    public void createNewTableModel() throws SQLException {
        myTableModel = new DataTableModel(getContentsOfTable());
        //myTableModel.addEventHandlersToRowSet(this);
        clientTable.setModel(myTableModel);
    }
    
    
    
    public Main_W getMainWin() {
        return parent;
    }
    


    private final Main_W parent;
    private final Properties connectionProp; 
    private DataTableModel myTableModel;
    private final JTable clientTable;
    private int selectedRow;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton modifButton;
    private javax.swing.JScrollPane paneForTable;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}
