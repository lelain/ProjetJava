
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner.DefaultEditor;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author brendan
 */
public class AddOrdArticle extends javax.swing.JDialog implements DocumentListener {

    /**
     * Creates new form AddOrdArticle
     * @param parent
     * @param addOrder
     * @param modal
     */
    public AddOrdArticle(java.awt.Frame parent, AddOrder addOrder, boolean modal) {
        super(parent, modal);
        
        this.orderTab=addOrder.getOrderTab();
        this.addOrder=addOrder;

        initBrandCombo();
        initNameCombo();
        initComponents();
        initInfos();
        initLab();
        
        bPriceLab.setEnabled(false);
        bpriceField.setEnabled(false);
        bpUnitCombo.setEnabled(false);
        rateLab.setEnabled(false);
        rateSUnitLab.setEnabled(false);
        equalLab.setEnabled(false);
        changeRateField.setEnabled(false);
        rateBUnitLab.setEnabled(false);
        
        ((DefaultEditor) quant.getEditor()).getTextField().setEditable(false);
   
        spriceField.getDocument().addDocumentListener(this);
        bpriceField.getDocument().addDocumentListener(this);
        changeRateField.getDocument().addDocumentListener(this);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        brandCombo = new javax.swing.JComboBox<>(brands);
        nameCombo = new javax.swing.JComboBox<>(names);
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        quant = new javax.swing.JSpinner();
        sPriceLab = new javax.swing.JLabel();
        spriceField = new javax.swing.JTextField();
        spUnitCombo = new javax.swing.JComboBox<>();
        priceFixedCheck = new javax.swing.JCheckBox();
        bPriceLab = new javax.swing.JLabel();
        bpriceField = new javax.swing.JTextField();
        bpUnitCombo = new javax.swing.JComboBox<>();
        rateLab = new javax.swing.JLabel();
        changeRateField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        infosArea = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        categoryLab = new javax.swing.JLabel();
        quantityLab = new javax.swing.JLabel();
        priceLab = new javax.swing.JLabel();
        qunitLab = new javax.swing.JLabel();
        punitLab = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        infosText = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        stateOrdCombo = new javax.swing.JComboBox<>();
        rateSUnitLab = new javax.swing.JLabel();
        rateBUnitLab = new javax.swing.JLabel();
        equalLab = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        okButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add article to the order");

        jLabel1.setText("Article");

        jLabel2.setText("Brand : ");

        jLabel3.setText("Name : ");

        brandCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                brandComboItemStateChanged(evt);
            }
        });

        nameCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nameComboItemStateChanged(evt);
            }
        });

        jButton1.setText("New product");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        jLabel4.setText("Article information");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 2, 13)); // NOI18N
        jLabel5.setText("Category : ");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 2, 13)); // NOI18N
        jLabel6.setText("Quantity : ");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 2, 13)); // NOI18N
        jLabel8.setText("Observed price : ");

        jLabel10.setFont(new java.awt.Font("Ubuntu", 2, 13)); // NOI18N
        jLabel10.setText("Infos : ");

        jLabel11.setText("Quantity : ");

        quant.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));
        quant.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        sPriceLab.setText("Selling price (per unit) : ");

        spUnitCombo.setEditable(true);
        spUnitCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RMB", "Euros" }));
        spUnitCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                spUnitComboItemStateChanged(evt);
            }
        });

        priceFixedCheck.setText("Price yet to be fixed");
        priceFixedCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                priceFixedCheckItemStateChanged(evt);
            }
        });

        bPriceLab.setText("Buying price : ");

        bpUnitCombo.setEditable(true);
        bpUnitCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Euros", "RMB" }));
        bpUnitCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bpUnitComboItemStateChanged(evt);
            }
        });

        rateLab.setText("Change rate (the date of purchase) :  1");

        jLabel15.setText("Other information");

        infosArea.setColumns(20);
        infosArea.setRows(5);
        jScrollPane1.setViewportView(infosArea);

        categoryLab.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        categoryLab.setText("jLabel7");

        quantityLab.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        quantityLab.setText("jLabel7");

        priceLab.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        priceLab.setText("jLabel7");

        qunitLab.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        qunitLab.setText("jLabel7");

        punitLab.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        punitLab.setText("jLabel7");

        infosText.setEditable(false);
        infosText.setBackground(new java.awt.Color(229, 227, 224));
        infosText.setColumns(20);
        infosText.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        infosText.setRows(5);
        jScrollPane2.setViewportView(infosText);

        jLabel7.setText("Order's state :");

        stateOrdCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not purchased", "Purchased", "Sent to China", "Received in China" }));
        stateOrdCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                stateOrdComboItemStateChanged(evt);
            }
        });

        rateSUnitLab.setText("sellingUnit");

        rateBUnitLab.setText("buying unit");

        equalLab.setText("=");

        okButton.setText("Finish");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1))
                    .addComponent(jSeparator5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(okButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(138, 138, 138)
                                .addComponent(bpriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bpUnitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(stateOrdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(39, 39, 39)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(bPriceLab)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(rateLab)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(rateSUnitLab)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(equalLab)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(changeRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rateBUnitLab))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(quant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(sPriceLab)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spUnitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(priceFixedCheck))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel5)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(categoryLab))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel6)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(quantityLab)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(qunitLab))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel8)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(priceLab)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(punitLab))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel10)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(brandCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(57, 57, 57)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(nameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton1)))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brandCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(nameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(categoryLab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(quantityLab)
                    .addComponent(qunitLab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(priceLab)
                    .addComponent(punitLab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(quant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sPriceLab)
                    .addComponent(spriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spUnitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceFixedCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(stateOrdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bPriceLab)
                    .addComponent(bpriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bpUnitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rateLab)
                    .addComponent(rateSUnitLab)
                    .addComponent(changeRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rateBUnitLab)
                    .addComponent(equalLab))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(jButton3))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void brandComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_brandComboItemStateChanged
        // when we choose an other brand, we update the nameCombo
        updateNameCombo();
        updateInfos();
    }//GEN-LAST:event_brandComboItemStateChanged

    private void nameComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nameComboItemStateChanged
        //when we choose an other product we update the information about the newly selected one
        updateInfos();
    }//GEN-LAST:event_nameComboItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // add a new product
        AddProdFromNewOrder NewProdW = new AddProdFromNewOrder(orderTab.getMainWin(),orderTab.getMainWin().getProductTab(),this,true);       
        NewProdW.setLocationRelativeTo(null);
        NewProdW.setVisible(true);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void priceFixedCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_priceFixedCheckItemStateChanged
        // when the check box is or not checked
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            sPriceLab.setEnabled(false);
            spriceField.setEnabled(false);
            spriceField.setText("");
            spUnitCombo.setEnabled(false);  
        } else {
            sPriceLab.setEnabled(true);
            spriceField.setEnabled(true);
            spUnitCombo.setEnabled(true);
        }
        
        readyToValidate();
    }//GEN-LAST:event_priceFixedCheckItemStateChanged

    private void stateOrdComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_stateOrdComboItemStateChanged
        // depending of the order's state, we enabled or not the fields and labels
        int stateInd = stateOrdCombo.getSelectedIndex();
        //If the product is not purchased, we disabled the components
        if (stateInd == 0) {
            bPriceLab.setEnabled(false);
            bpriceField.setEnabled(false);
            bpriceField.setText("");
            bpUnitCombo.setEnabled(false);
            rateLab.setEnabled(false);
            rateSUnitLab.setEnabled(false);
            equalLab.setEnabled(false);
            changeRateField.setEnabled(false);
            changeRateField.setText("");
            rateBUnitLab.setEnabled(false);
            
        } else {
            bPriceLab.setEnabled(true);
            bpriceField.setEnabled(true);
            bpUnitCombo.setEnabled(true);
            rateLab.setEnabled(true);
            rateSUnitLab.setEnabled(true);
            equalLab.setEnabled(true);
            changeRateField.setEnabled(true);
            rateBUnitLab.setEnabled(true);
        }
        
        readyToValidate();
    }//GEN-LAST:event_stateOrdComboItemStateChanged

    private void spUnitComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_spUnitComboItemStateChanged

        rateSUnitLab.setText((String)spUnitCombo.getSelectedItem());
    }//GEN-LAST:event_spUnitComboItemStateChanged

    private void bpUnitComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bpUnitComboItemStateChanged

        rateBUnitLab.setText((String)bpUnitCombo.getSelectedItem());
    }//GEN-LAST:event_bpUnitComboItemStateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        //Add the article order in the data base and update the addOrder dialog
        //prepare the string for the request
        
        if (verified()) {
            //First we stock all we have from the dialog
            String brand = "'" + brandCombo.getSelectedItem() + "'";
            
            //brand2 is only for the request
            String brand2 = (String) brandCombo.getSelectedItem();
            brand2 = "'" + brand2.replaceAll("'","\\\\'") + "'";
            
            String name =  "'" + nameCombo.getSelectedItem()+ "'";
            
            //name2 is only for the request
            String name2 = (String) nameCombo.getSelectedItem();
            name2 = "'" + name2.replaceAll("'","\\\\'") + "'";
            
            String quantity = quant.getValue().toString();
            
            String sellingPr,spUnit;
            if (!priceFixedCheck.isSelected()) {
                sellingPr = spriceField.getText();
                spUnit = "'" + spUnitCombo.getSelectedItem() + "'";
            } else { 
                sellingPr = "NULL";
                spUnit = "NULL";
            }
        
            String state = Integer.toString(stateOrdCombo.getSelectedIndex());
        
            String buyingPr,bpUnit,rate;
            if ("0".equals(state)) {
                buyingPr = "NULL";
                bpUnit = "NULL";
                rate = "NULL";
            } else {
                buyingPr = bpriceField.getText();
                bpUnit = "'" + bpUnitCombo.getSelectedItem() + "'";
                rate = changeRateField.getText();
            }
            
            String infos="NULL";
            if (!"".equals(infosArea.getText())) {
                infos = infosArea.getText() ;
                infos = "'" + infos + "'";
            }
        
            //we should search the article id
            String articleId=null;
            Statement stmt = null;
            try{
                stmt = orderTab.getMainWin().getConnection().createStatement();
                String sqlQuery;
                sqlQuery="SELECT pr_id from V_Products where brand="+brand2+" and name="+name2;
                ResultSet rs = stmt.executeQuery(sqlQuery);
                if (rs.next()) { articleId = rs.getString("pr_id"); }
            } catch(SQLException se) {
                //Handle errors for JDBC
                JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
            } finally {
                //finally block used to close resources
                try{
                    if(stmt!=null)
                    stmt.close();
                }catch(SQLException se2){ }// nothing we can do
            }//end finally
        
            //We put the wanted datas in an array of String
            String[] data = new String[12];
            data[0] = articleId;
            data[1] = name;
            data[2] = brand;
            data[3] = quantity;
            data[4] = sellingPr;
            data[5] = spUnit;
            data[6] = buyingPr;
            data[7] = bpUnit;
            data[8] = rate;
            data[9] = "0";     //not paid
            data[10] = state;
            data[11] = infos; 
        
            addOrder.addOrdArt(data);
            addOrder.updateTable();
            addOrder.updateTotal();
        
            this.dispose();
        }
        
        
    }//GEN-LAST:event_okButtonActionPerformed

    
    private boolean verified() {
        if (priceFixedCheck.isSelected() && stateOrdCombo.getSelectedIndex() == 0) {
            return  true;    
    
        }
        
        if (priceFixedCheck.isSelected() && stateOrdCombo.getSelectedIndex() != 0) {
            return ( Utilities.isDouble(bpriceField,"The price should be a float",this) &&
                Utilities.isDouble(changeRateField,"The change rate should be a float",this) );     
        }

        if (!priceFixedCheck.isSelected() && stateOrdCombo.getSelectedIndex() == 0) {
            return  Utilities.isDouble(spriceField,"The price should be a float",this);    
        }
        
     
        
        if (!priceFixedCheck.isSelected() && stateOrdCombo.getSelectedIndex() != 0) {
            return  ( Utilities.isDouble(spriceField,"The price should be a float",this) && 
                Utilities.isDouble(bpriceField,"The price should be a float",this) &&
                Utilities.isDouble(changeRateField,"The change rate should be a float",this) );     
        }
        
        //normally we should not go here 
        JOptionPane.showMessageDialog(this, "Problem somewhere in checking the fields",
                    "Warning", JOptionPane.WARNING_MESSAGE);
        return false;
    }
    
    private void initLab() {
        bPriceLab.setFont(new java.awt.Font("MS Song", 0, 12));
        categoryLab.setFont(new java.awt.Font("MS Song", 0, 12));
        equalLab.setFont(new java.awt.Font("MS Song", 0, 12));
        infosArea.setFont(new java.awt.Font("MS Song", 0, 12));
        infosText.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel1.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel10.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel11.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel15.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel2.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel3.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel4.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel5.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel6.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel7.setFont(new java.awt.Font("MS Song", 0, 12));
        jLabel8.setFont(new java.awt.Font("MS Song", 0, 12));
        priceLab.setFont(new java.awt.Font("MS Song", 0, 12));
        punitLab.setFont(new java.awt.Font("MS Song", 0, 12));
        quantityLab.setFont(new java.awt.Font("MS Song", 0, 12));
        qunitLab.setFont(new java.awt.Font("MS Song", 0, 12));
        rateBUnitLab.setFont(new java.awt.Font("MS Song", 0, 12));
        rateLab.setFont(new java.awt.Font("MS Song", 0, 12));
        rateSUnitLab.setFont(new java.awt.Font("MS Song", 0, 12));
        sPriceLab.setFont(new java.awt.Font("MS Song", 0, 12));
        
        rateSUnitLab.setText((String)spUnitCombo.getSelectedItem());
        rateBUnitLab.setText((String)bpUnitCombo.getSelectedItem());
       
    }
    
    private void initBrandCombo() {
        //we search the number of brand in the database and store it in size
        Statement stmt = null;
        int size=0;
        try{
            stmt = orderTab.getMainWin().getConnection().createStatement();
            String sqlQuery;
            sqlQuery="SELECT COUNT(DISTINCT brand) from V_Products";
            ResultSet rs = stmt.executeQuery(sqlQuery);
            if (rs.next()) { size = rs.getInt("COUNT(DISTINCT brand)"); }
        } catch(SQLException se) {
            //Handle errors for JDBC
            JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                  "Warning", JOptionPane.ERROR_MESSAGE);
        } finally {
            //finally block used to close resources
            try{
                if(stmt!=null)
                stmt.close();
            }catch(SQLException se2){ }// nothing we can do
        }//end finally
        
        //now I can create my String tab
        brands = new String[size];
        
        //we populate it with the brands in the data base
        stmt = null;
        try{
            stmt = orderTab.getMainWin().getConnection().createStatement();
            String sqlQuery;
            sqlQuery = "SELECT DISTINCT brand FROM V_Products";
            ResultSet rs = stmt.executeQuery(sqlQuery);
            int i=0;
            while (rs.next()) { 
                brands[i]=rs.getString("brand");  
                i++; 
            }
                        
        } catch(SQLException se) {
            //Handle errors for JDBC
            JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                  "Warning", JOptionPane.ERROR_MESSAGE);
        } finally {
            //finally block used to close resources
            try{
                if(stmt!=null)
                stmt.close();
            }catch(SQLException se2){ }// nothing we can do
        }//end finally 
        
        //sort the array
        Arrays.sort(brands);
    }
    
    private void initNameCombo() {
        //we search the number of brand in the database and store it in size
        int size=0;
        if (brands.length!=0) {
            Statement stmt = null;
            try{
                stmt = orderTab.getMainWin().getConnection().createStatement();
                String sqlQuery;
                sqlQuery="SELECT COUNT(name) from V_Products where brand='"+brands[0]+"'";  //When initialize brandCombo, we set the first item in the brands array string
                ResultSet rs = stmt.executeQuery(sqlQuery);
                if (rs.next()) { size = rs.getInt("COUNT(name)"); }
            } catch(SQLException se) {
                //Handle errors for JDBC
                JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
            } finally {
                //finally block used to close resources
                try{
                    if(stmt!=null)
                    stmt.close();
                }catch(SQLException se2){ }// nothing we can do
            }//end finally
        }
        
        
        //now I can create my String tab
        names = new String[size];
        
        //we populate it with the brands in the data base
        if (brands.length!=0) {
            Statement stmt = null;
            try{
                stmt = orderTab.getMainWin().getConnection().createStatement();
                String sqlQuery;
                sqlQuery = "SELECT name FROM V_Products where brand='"+brands[0]+"'";
                ResultSet rs = stmt.executeQuery(sqlQuery);
                int i=0;
                while (rs.next()) { 
                    names[i]=rs.getString("name");  
                    i++; 
                }
                        
            } catch(SQLException se) {
                //Handle errors for JDBC
                JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
            } finally {
                //finally block used to close resources
                try{
                    if(stmt!=null)
                    stmt.close();
                }catch(SQLException se2){ }// nothing we can do
            }//end finally 
        }
        
        
        //sort the array
        Arrays.sort(names);
    }
    
    private void initInfos() {
        String brandStr, nameStr;
        String category="",quantity="",qunit="",price="",punit="",infos="";
        
        if (brands.length!=0) {
            brandStr = brands[0];
            nameStr = names[0];
        
            
            Statement stmt = null;
            try{
                stmt = orderTab.getMainWin().getConnection().createStatement();
                String sqlQuery;
                sqlQuery="SELECT category,quantity,qunit,price,punit,infos from V_Products where brand='"+brandStr+"' and name='"+nameStr+"'"; 
                ResultSet rs = stmt.executeQuery(sqlQuery);
                if (rs.next()) { 
                    category = rs.getString("category");
                    quantity = rs.getString("quantity");
                    qunit = rs.getString("qunit");
                    price = rs.getString("price");
                    punit = rs.getString("punit");
                    infos = rs.getString("infos");    
                }
            } catch(SQLException se) {
                //Handle errors for JDBC
                JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                    "Warning", JOptionPane.ERROR_MESSAGE);
            } finally {
                //finally block used to close resources
                try{
                    if(stmt!=null)
                    stmt.close();
                }catch(SQLException se2){ }// nothing we can do
            }//end finally
        }
        
        categoryLab.setText(category);
        quantityLab.setText(quantity);
        qunitLab.setText(qunit);
        priceLab.setText(price);
        punitLab.setText(punit);
        infosText.setText(infos);
        
    }
    
    //update the brand combo and select item
    public void updateBrandCombo(String item) {
        //we search the number of brand in the database and store it in size
        Statement stmt = null;
        int size=0;
        try{
            stmt = orderTab.getMainWin().getConnection().createStatement();
            String sqlQuery;
            sqlQuery="SELECT COUNT(DISTINCT brand) from V_Products";
            ResultSet rs = stmt.executeQuery(sqlQuery);
            if (rs.next()) { size = rs.getInt("COUNT(DISTINCT brand)"); }
        } catch(SQLException se) {
            //Handle errors for JDBC
            JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                  "Warning", JOptionPane.ERROR_MESSAGE);
        } finally {
            //finally block used to close resources
            try{
                if(stmt!=null)
                stmt.close();
            }catch(SQLException se2){ }// nothing we can do
        }//end finally
        
        //now I can create my String tab
        brands = new String[size];
        
        //we populate it with the brands in the data base
        stmt = null;
        try{
            stmt = orderTab.getMainWin().getConnection().createStatement();
            String sqlQuery;
            sqlQuery = "SELECT DISTINCT brand FROM V_Products";
            ResultSet rs = stmt.executeQuery(sqlQuery);
            int i=0;
            while (rs.next()) { 
                brands[i]=rs.getString("brand");  
                i++; 
            }
                        
        } catch(SQLException se) {
            //Handle errors for JDBC
            JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                  "Warning", JOptionPane.ERROR_MESSAGE);
        } finally {
            //finally block used to close resources
            try{
                if(stmt!=null)
                stmt.close();
            }catch(SQLException se2){ }// nothing we can do
        }//end finally 
        
        //sort the array
        Arrays.sort(brands);
        brandCombo.setModel(new DefaultComboBoxModel(brands));
        brandCombo.setSelectedItem(item);
    }
    
    public void updateNameCombo() {
        //we search the number of brand in the database and store it in size
        String brand = (String) brandCombo.getSelectedItem();
        brand = "'" + brand.replaceAll("'","\\\\'") + "'";
        Statement stmt = null;
        int size=0;
        try{
            stmt = orderTab.getMainWin().getConnection().createStatement();
            String sqlQuery;
            sqlQuery="SELECT COUNT(name) from V_Products where brand="+brand; 
            ResultSet rs = stmt.executeQuery(sqlQuery);
            if (rs.next()) { size = rs.getInt("COUNT(name)"); }
        } catch(SQLException se) {
            //Handle errors for JDBC
            JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                  "Warning", JOptionPane.ERROR_MESSAGE);
        } finally {
            //finally block used to close resources
            try{
                if(stmt!=null)
                stmt.close();
            }catch(SQLException se2){ }// nothing we can do
        }//end finally
        
        //now I can create my String tab
        names = new String[size];
        
        //we populate it with the brands in the data base
        stmt = null;
        try{
            stmt = orderTab.getMainWin().getConnection().createStatement();
            String sqlQuery;
            sqlQuery = "SELECT name FROM V_Products where brand="+brand;
            ResultSet rs = stmt.executeQuery(sqlQuery);
            int i=0;
            while (rs.next()) { 
                names[i]=rs.getString("name");  
                i++; 
            }
                        
        } catch(SQLException se) {
            //Handle errors for JDBC
            JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                  "Warning", JOptionPane.ERROR_MESSAGE);
        } finally {
            //finally block used to close resources
            try{
                if(stmt!=null)
                stmt.close();
            }catch(SQLException se2){ }// nothing we can do
        }//end finally 
        
        //sort the array
        Arrays.sort(names);
        nameCombo.setModel(new DefaultComboBoxModel(names));
    }
    
    public void updateInfos() {
        String brandStr, nameStr;
        brandStr = (String) brandCombo.getSelectedItem();
        brandStr = brandStr.replaceAll("'","\\\\'");
        nameStr = (String) nameCombo.getSelectedItem();
        nameStr = nameStr.replaceAll("'","\\\\'");
        
        String category="",quantity="",qunit="",price="",punit="",infos="";
        Statement stmt = null;
        try{
            stmt = orderTab.getMainWin().getConnection().createStatement();
            String sqlQuery;
            sqlQuery="SELECT category,quantity,qunit,price,punit,infos from V_Products where brand='"+brandStr+"' and name='"+nameStr+"'"; 
            ResultSet rs = stmt.executeQuery(sqlQuery);
            if (rs.next()) { 
                category = rs.getString("category");
                quantity = rs.getString("quantity");
                qunit = rs.getString("qunit");
                price = rs.getString("price");
                punit = rs.getString("punit");
                infos = rs.getString("infos");    
            }
        } catch(SQLException se) {
            //Handle errors for JDBC
            JOptionPane.showMessageDialog(this, "Unexpected error, Request problem\nDetails : "+se.getMessage(),
                  "Warning", JOptionPane.ERROR_MESSAGE);
        } finally {
            //finally block used to close resources
            try{
                if(stmt!=null)
                stmt.close();
            }catch(SQLException se2){ }// nothing we can do
        }//end finally
        
        categoryLab.setText(category);
        quantityLab.setText(quantity);
        qunitLab.setText(qunit);
        priceLab.setText(price);
        punitLab.setText(punit);
        infosText.setText(infos);
        
        
    }
    
    
    private void readyToValidate() {
        if ((priceFixedCheck.isSelected() || !"".equals(spriceField.getText())) && 
                (stateOrdCombo.getSelectedIndex() == 0 || (!"".equals(bpriceField.getText()) && !"".equals(changeRateField.getText())))) {
            okButton.setEnabled(true);
        } else {
            okButton.setEnabled(false);
        }
    }
    
    
    private OrderTab orderTab;
    private AddOrder addOrder;
    private String[] brands;
    private String[] names;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bPriceLab;
    private javax.swing.JComboBox<String> bpUnitCombo;
    private javax.swing.JTextField bpriceField;
    private javax.swing.JComboBox<String> brandCombo;
    private javax.swing.JLabel categoryLab;
    private javax.swing.JTextField changeRateField;
    private javax.swing.JLabel equalLab;
    private javax.swing.JTextArea infosArea;
    private javax.swing.JTextArea infosText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JComboBox<String> nameCombo;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox priceFixedCheck;
    private javax.swing.JLabel priceLab;
    private javax.swing.JLabel punitLab;
    private javax.swing.JSpinner quant;
    private javax.swing.JLabel quantityLab;
    private javax.swing.JLabel qunitLab;
    private javax.swing.JLabel rateBUnitLab;
    private javax.swing.JLabel rateLab;
    private javax.swing.JLabel rateSUnitLab;
    private javax.swing.JLabel sPriceLab;
    private javax.swing.JComboBox<String> spUnitCombo;
    private javax.swing.JTextField spriceField;
    private javax.swing.JComboBox<String> stateOrdCombo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        readyToValidate();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        readyToValidate();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        readyToValidate();
    }
}
